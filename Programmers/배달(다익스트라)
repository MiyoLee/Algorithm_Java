package programmers;

import java.util.Arrays;

public class Solution {
	public static void main(String[] args) {
		int N = 6;
		int[][] road = { { 1, 2, 1 }, { 1, 3, 2 }, { 2, 3, 2 }, { 3, 4, 3 }, { 3, 5, 2 }, { 3, 5, 3 }, { 5, 6, 1 } };
		int K = 4;
		System.out.println(solution(N, road, K));
	}

	public static int solution(int N, int[][] road, int K) {
		int answer = 0;
		int[][] adj = new int[N + 1][N + 1]; // 1번 정점 ~ N번 정점
		// 인접행렬 입력받기
		for (int i = 0; i < road.length; i++) {
			if (adj[road[i][0]][road[i][1]] == 0 || adj[road[i][0]][road[i][1]] > road[i][2]) { // 현재 가중치보다 새로 입력된 가중치가
																								// 작다면

				adj[road[i][0]][road[i][1]] = road[i][2];
				adj[road[i][1]][road[i][0]] = road[i][2];
			}
		}

		// 입력 완료
		// 다익스트라 알고리즘 gogo!
		int[] distance = new int[N + 1]; // 1번 정점으로부터 i번 정점까지 거리
		boolean[] visited = new boolean[N + 1]; // 경유지로 방문했는지 체크하는 배열

		Arrays.fill(distance, Integer.MAX_VALUE);
		distance[1] = 0;

		for (int i = 0; i < N; i++) { // 모든 정점 다 방문(경유지로 선택)할때까지 반복
			
			int min = Integer.MAX_VALUE;
			int current = 0;
			for (int v = 1; v <= N; v++) {
				if (!visited[v] && distance[v] < min) {
					min = distance[v];
					current = v;
				}
			}
			visited[current] = true;
			
			// 아직 방문하지 않았고 current와 인접한 모든 정점 -> distance 갱신
			for (int v = 1; v <= N; v++) {
				if (!visited[v] && adj[current][v] != 0 && distance[current] + adj[current][v] < distance[v]) {
					distance[v] = distance[current] + adj[current][v]; // distance 갱신.
				}
			}
		}
		for (int d : distance) {
			//System.out.print(d+" ");
			if (d <= K)
				answer++;
		}
		//System.out.println();
		return answer;
	}
}
