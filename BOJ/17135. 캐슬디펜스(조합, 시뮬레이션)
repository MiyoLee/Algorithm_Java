package ssafy_algo_0217;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_17135 {
	static int N, M, D;
	static int[][] map;
	static int[][] copyMap;
	static int[] arc; // 궁수 세명의 x좌표
	static int killcnt = 0; // 궁수가 죽인 적의 수.
	static int deadcnt = 0;
	static int flag = 0;
	static int ans = 0; // 궁수가 죽일수 있는 적의 최대 수

	static class Pos {
		int y, x;

		public Pos(int y, int x) {
			super();
			this.y = y;
			this.x = x;
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		D = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		copyMap = new int[N][M];
		
		arc = new int[3];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				copyMap[i][j] = map[i][j];
			}
		}
		// 입력 다 받았음.
		Comb(0, 0);
		System.out.println(ans);
	}

	public static void Comb(int cnt, int start) { // 궁수 3명의 자리를 뽑는다.
		if (cnt == 3) {
			killcnt = 0;
			for(int i=0; i<N; i++) {	//N번 만큼 반복.
				turn();
				//System.out.println(Arrays.toString(arc)+":"+killcnt);
			}
			// 게임 끝
			//System.out.println("======================");
			ans = Math.max(ans, killcnt);
			init(); // 맵 초기화.
			return;
		}
		for (int i = start; i < M; i++) {
			arc[cnt] = i;
			Comb(cnt + 1, i + 1);
		}
	}

	// 한 턴.
	public static void turn() {
		boolean[][] visited = new boolean[N][M];
		for (int k = 0; k < 3; k++) {
			int a = arc[k];
			int min = D+1; // 적과의 최소 거리
			int mr = -1, mc = -1;
			for (int i = 0; i < N; i++) { // 적중에 공격가능한 적 하나 뽑음.
				for (int j = 0; j < M; j++) {
					int dist;
					if (map[i][j] == 1 && (dist = Math.abs(N - i) + Math.abs(a - j)) <= D) { // 적이 있고 제한거리안에 있을때
						if (dist < min || (dist==min && j < mc)) { // 거리가 현재 최소보다 작거나, 거리는 같으면서 더 왼쪽에 있다면
							mr = i;
							mc = j;
							min = dist;
						}
					}
				}
			}
			// 공격할 적 찾아냈다.
			if (mr>=0 && mc>=0 && visited[mr][mc] == false) {
				visited[mr][mc] = true;
			}
			// 죽일 적이 없으면 그냥 고.
		}
		// 공격할 적 목록 생성 완료.
		// 적 제거하기
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (visited[i][j]) { 	// 죽일 대상이라면
					map[i][j] = 0; 		// 없앤다
					++killcnt;			// kill++
				}
			}
		}
		//print();
		// 공격 끝나면 적이 이동. enemies 이동.
		for (int i = N-1; i > 0; i--) {
			for (int j = 0; j < M; j++) {
				map[i][j] = map[i-1][j];
			}
		}
		for(int j=0; j<M; j++) {	//맨 뒷줄은 다 0으로
			map[0][j]=0;
		}
	}
	
	public static void init() {
		// 맵 초기화
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[i].length; j++) {
				map[i][j] = copyMap[i][j];
			}
		}
	}

//	public static void print() {
//		for (int i = 0; i < N; i++) {
//			for (int j = 0; j < M; j++) {
//				System.out.print(map[i][j] + " ");
//			}
//			System.out.println();
//		}
//	}
}
