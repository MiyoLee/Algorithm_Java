package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;

//트리
public class BOJ_1068_S1 {
	static int N;
	static int deleteNode;
	static int leafcnt;
	static int[] parent;
	static HashMap<Integer, ArrayList<Integer>> children = new HashMap<>();
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());		//노드의 갯수 입력
		
		parent = new int[N];
		
		for(int i=0; i<N; i++) {
			children.put(i,new ArrayList<Integer>());
		}
		
		StringTokenizer st = new StringTokenizer(br.readLine());	//0~N-1 노드의 부모 노드 입력.
		for(int i=0; i<N;  i++) {	
			int p=Integer.parseInt(st.nextToken());
			if(p!=-1) {
				children.get(p).add(i);
			}
			
			parent[i]=p;
		}
		
		deleteNode = Integer.parseInt(br.readLine());		//지울 노드 번호 입력
		// 입력 완료
		
		dfs(deleteNode);
		children.remove(deleteNode);
		
		for(Integer key : children.keySet()) {
			if(children.get(key).size()==0)leafcnt++;
		}
		
		System.out.println(leafcnt);
	}
	
	//cur 노드를 지우는 함수
	public static void dfs(int cur) {
		if(children.get(cur).size()==0) {	
			children.remove(cur);
			if(parent[cur] != -1) {		//부모가 있다면 부모의 자식에서도 지워야한다.
				children.get(parent[cur]).remove((Integer)cur);
			}
			return;
		}
		for(int i=0; i<children.get(cur).size(); i++) {
			dfs(children.get(cur).get(i));
			i--;
		}
	}
}
