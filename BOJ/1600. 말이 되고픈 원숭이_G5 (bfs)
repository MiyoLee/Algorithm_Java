package ssafy_algo_0324;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

//말이 되고픈 원숭이.dfs->시간초과.
public class BOJ_1600_G5 {
	static int K;
	static int W, H; // 가로길이, 세로길이
	static int[][] map;
	static boolean[][][] visited;
	static int[] dr = { -1, 1, 0, 0 }; // 상하좌우
	static int[] dc = { 0, 0, -1, 1 };
	static int[] hdr = { -1, -2, -2, -1, 1, 2, 1, 2 }; // 말의 움직임
	static int[] hdc = { -2, -1, 1, 2, -2, -1, 2, 1 };

	public static class Pos {
		int r, c;
		int k; // 0,0에서 r,c 올때까지 말처럼 이동한 횟수
		int m; // r,c 올때까지 이동한 횟수

		public Pos(int r, int c, int k, int m) {
			super();
			this.r = r;
			this.c = c;
			this.k = k;
			this.m = m;
		}

	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		K = Integer.parseInt(br.readLine()); // 말처럼 움직일 수 있는 횟수

		st = new StringTokenizer(br.readLine());
		W = Integer.parseInt(st.nextToken());
		H = Integer.parseInt(st.nextToken());
		map = new int[H][W];
		for (int i = 0; i < H; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < W; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		// 입력 완료

		visited = new boolean[H][W][31];		//i,j에 말 능력 k번 이동해서 방문했다.
		Queue<Pos> q = new LinkedList<>();
		q.offer(new Pos(0, 0, 0, 0));
		visited[0][0][0]=true;

		while (!q.isEmpty()) {
			Pos cur = q.poll();
			int cr = cur.r;
			int cc = cur.c;
			int ck = cur.k;
			int cm = cur.m;
			
			if(cr==H-1 && cc==W-1) {
				System.out.println(cm);
				return;
			}
			// 말처럼 이동하는 경우
			if (ck < K) {
				for (int d = 0; d < 8; d++) {
					int nr = cr + hdr[d];
					int nc = cc + hdc[d];
					if (nr >= 0 && nr < H && nc >= 0 && nc < W && !visited[nr][nc][ck+1] && map[nr][nc] == 0) {
						visited[nr][nc][ck+1] = true;
						q.offer(new Pos(nr, nc, ck + 1, cm + 1));
					}
				}
			}
			// 일반 이동
			for (int d = 0; d < 4; d++) {
				int nr = cr + dr[d];
				int nc = cc + dc[d];
				if (nr >= 0 && nr < H && nc >= 0 && nc < W && !visited[nr][nc][ck] && map[nr][nc] == 0) {
					visited[nr][nc][ck] = true;
					q.offer(new Pos(nr, nc, ck, cm + 1));
				}
			}
		}
		System.out.println(-1);
	}
}
