package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

//구슬찾기
public class BOJ_2617_S1_2 {
	static int N,M;
	static int[][] heavy;
	static int[][] light;
	static int hcnt,lcnt;
	static int ans;
    public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());		//구슬의 갯수
		M = Integer.parseInt(st.nextToken());		//구슬에 올려본 쌍의 갯수
		
		heavy = new int[N+1][N+1];
		light = new int[N+1][N+1];
		
		for(int i=0; i<M; i++) {
			st = new StringTokenizer(br.readLine());
			int to = Integer.parseInt(st.nextToken());
			int from = Integer.parseInt(st.nextToken());
			
			heavy[from][to]=1;
			light[to][from]=1;
		}
		//입력 완료
		ans = 0;
		for(int i=1; i<=N; i++) {
			hcnt = 0;
			lcnt = 0;
			hdfs(i, new boolean[N+1]);
			ldfs(i, new boolean[N+1]);
			if(hcnt>N/2 || lcnt>N/2)ans++;
		}
		System.out.println(ans);
	}
    
    private static void hdfs(int cur, boolean[]visited) {
    	visited[cur]=true;
    	for(int i=1; i<=N; i++) {	
    		if(heavy[cur][i]==1 && !visited[i]) {		//cur보다 i가 더 무겁다면
    			hcnt++;
    			hdfs(i,visited);
    		}
    	}
    }
    private static void ldfs(int cur, boolean[]visited) {
    	visited[cur]=true;
    	for(int i=1; i<=N; i++) {	
    		if(light[cur][i]==1 && !visited[i]) {		//cur보다 i가 더 무겁다면
    			lcnt++;
    			ldfs(i,visited);
    		}
    	}
    }
}
