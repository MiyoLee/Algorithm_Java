package ssafy_algo_2010;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_17144 {
	static int R, C, T;
	static int[][] map;
	static int[] dr = { -1, 1, 0, 0 };
	static int[] dc = { 0, 0, -1, 1 };
	static int ar;

	// BFS로 풀어보자.
	public static void diffusion() {
		int[] dr = { -1, 1, 0, 0 };
		int[] dc = { 0, 0, -1, 1 };
		Queue<int[]> q = new LinkedList<>();

		for (int i = 1; i < map.length; i++) { // 미세먼지 있는 위치 정보 큐에 삽입
			for (int j = 1; j < map[i].length; j++) {
				if (map[i][j] > 0) {
					q.offer(new int[] { i, j, map[i][j] / 5 });
				}
			}
		}
		while (!q.isEmpty()) {
			int[] cur = q.poll();
			int cr = cur[0]; // 현재 r
			int cc = cur[1]; // 현재 c
			int cm = cur[2]; // 한 방향에 확산될 미세먼지 양
			for (int d = 0; d < 4; d++) {
				int nr = cr + dr[d];
				int nc = cc + dc[d];
				if (nr >= 1 && nr < map.length && nc >= 1 && nc < map[0].length && map[nr][nc] != -1) { // 범위 안에있고,
																										// 공기청정기 자리
					map[nr][nc] += cm;
					map[cr][cc] -= cm;
				}
			}
		}

	}

	public static void air() { // 공기청정기 작동.
		// i:1~ar 반시계방향
		int[] dr = { 0, 1, 0, -1 }; // 우하좌상
		int[] dc = { 1, 0, -1, 0 }; // 우하좌상

		int cr = 1, cc = 1;
		int d = 0;
		int tmp = map[1][1];
		int nr, nc;
		while (d < 4) {
			nr = cr + dr[d];
			nc = cc + dc[d];
			if (nr >= 1 && nr < ar && nc >= 1 && nc < map[0].length) { // 범위 안에 있다면
				if (map[cr][cc] == -1) { // 공기청정기자리일 경우
					map[nr][nc] = 0; // 먼지 사라지게한다.
				} else if (map[nr][nc] == -1) { // 공기청정기 칸에서 미세먼지가 올 경우
					map[cr][cc] = 0; // 미세먼지는 안온다.
				}
				// 정상일 경우
				else {
					map[cr][cc] = map[nr][nc];
				}

				cr = nr; // 현재위치를 바꾼다.
				cc = nc;
			} else { // 범위밖으로 나갔다면 방향 꺾기.
				++d;
			}
		}
		map[2][1]=tmp;
	}

	public static void air2() { // 공기청정기 작동.
		// ar+1~R 시계방향
		int[] dr = { 1, 0, -1, 0 }; // 하우상좌
		int[] dc = { 0, 1, 0, -1 }; // 하우상좌

		int cr = ar, cc = 1;
		int d = 0;
		int nr, nc;
		while (d < 4) {
			nr = cr + dr[d];
			nc = cc + dc[d];
			if (nr >= ar && nr < map.length && nc >= 1 && nc < map[0].length) { // 범위 안에 있다면
				if (map[cr][cc] == -1) { // 공기청정기자리일 경우
					map[nr][nc] = 0; // 먼지 사라지게한다.
				} else if (map[nr][nc] == -1) { // 공기청정기 칸에서 미세먼지가 올 경우
					map[cr][cc] = 0; // 미세먼지는 안온다.
				}
				// 정상일 경우
				else {
					map[cr][cc] = map[nr][nc];
				}

				cr = nr; // 현재위치를 바꾼다.
				cc = nc;
			} else { // 범위밖으로 나갔다면 방향 꺾기.
				++d;
			}
		}
		
	}

	public static void print() {
		StringBuilder sb = new StringBuilder();
		for (int i = 1; i < map.length; i++) {
			for (int j = 1; j < map[i].length; j++) {
				sb.append(map[i][j]).append(" ");
			}
			sb.append("\n");
		}
		System.out.println(sb);
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");

		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		T = Integer.parseInt(st.nextToken());

		map = new int[R + 1][C + 1];

		for (int i = 1; i < map.length; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for (int j = 1; j < map[i].length; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == -1) { // 공기청정기의 두번째점.
					ar = i;
				}
			}
		}
		// 입력 완료.
		for (int i = 0; i < T; i++) {

			diffusion();
			air();
			air2();
		}

		int sum = 2;
		for (int i = 1; i < map.length; i++) {
			for (int j = 1; j < map[i].length; j++) {
				sum += map[i][j];
			}
		}
		
		System.out.println(sum);
	}
}
