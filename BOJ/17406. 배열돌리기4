package ssafy_algo_2010;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_17406 {
	static int N, M, K;
	static int[][] original;
	static int[][] map;
	static int[][] commands;
	static int minmin = Integer.MAX_VALUE;
	static int[] dr = { 1, 0, -1, 0 }; // 하 우 상 좌
	static int[] dc = { 0, 1, 0, -1 }; // 하 우 상 좌

	public static void init() { // original 값을 map으로 복사.
		for (int i = 0; i < original.length; i++) {
			for (int j = 0; j < original[i].length; j++) {
				map[i][j] = original[i][j];
			}
		}
	}

	public static void Per(int cnt, int[] selected, boolean[] isSelected) {
		if (cnt == K) {
			for (int i = 0; i < selected.length; i++) {
				Cal(selected[i]);
			}
			minmin = Math.min(minmin, mapValue()); // 현재 순서대로 회전연산 다 수행했을때 배열의 최솟값이 최솟값의최솟값보다 작으면 최솟값의 최솟값.
			init();
			return;
		}
		for (int i = 0; i < commands.length; i++) {
			if (!isSelected[i]) {
				isSelected[i] = true;
				selected[cnt] = i;
				Per(cnt + 1, selected, isSelected);
				isSelected[i] = false;
			}
		}
	}

	public static void rotation(int r1, int c1, int r2, int c2, int cr, int cc, int d) {
		if (d >= 4) {
			return;
		}
		int nr = cr + dr[d];
		int nc = cc + dc[d];
		if (nr >= r1 && nc >= c1 && nr <= r2 && nc <= c2) { // 범위 내에 있다면
			map[cr][cc] = map[nr][nc];
			rotation(r1, c1, r2, c2, nr, nc, d); // 다음
		} else { // 범위 벗어난다면 방향 꺾기.
			rotation(r1, c1, r2, c2, cr, cc, d + 1);
		}

	}

	public static void print() {
		StringBuilder sb = new StringBuilder();
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= M; j++) {
				sb.append(map[i][j]).append(" ");
			}
			sb.append("\n");
		}
		System.out.println(sb);
	}

	public static int mapValue() {
		int min = Integer.MAX_VALUE;
		for (int i = 1; i <= N; i++) {
			int sum = 0;
			for (int j = 1; j <= M; j++) {
				sum += map[i][j];
			}
			min = Math.min(min, sum);
		}
		return min;
	}

	public static void Cal(int i) { // i 번째 command 수행하는 함수.

		int r = commands[i][0];
		int c = commands[i][1];
		int s = commands[i][2];
		for (int j = 0; j < s; j++) { // 그룹수만큼 돌린다.
			int tmp = map[r - s + j][c - s + j];
			rotation(r - s + j, c - s + j, r + s - j, c + s - j, r - s + j, c - s + j, 0);
			map[r - s + j][c - s + j + 1] = tmp;
		}
//			print();

	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken()); // 3 ≤ N
		M = Integer.parseInt(st.nextToken()); // M ≤ 50
		K = Integer.parseInt(st.nextToken()); // 1 ≤ K ≤ 6 : 회전수

		original = new int[N + 1][M + 1];
		map = new int[N + 1][M + 1];

		commands = new int[K][3]; // 회전 명령어들 저장.

		for (int i = 1; i < original.length; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for (int j = 1; j < original[i].length; j++) {
				original[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		init();

		for (int i = 0; i < K; i++) {
			st = new StringTokenizer(br.readLine(), " "); // 3 4 2 입력.
			commands[i][0] = Integer.parseInt(st.nextToken());
			commands[i][1] = Integer.parseInt(st.nextToken());
			commands[i][2] = Integer.parseInt(st.nextToken());
		}
		// 입력.

		Per(0, new int[K], new boolean[K]);
		System.out.println(minmin);

	}
}
