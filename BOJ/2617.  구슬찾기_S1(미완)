package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

//구슬 찾기
public class BOJ_2617_S1 {
	static int N, M; // 구슬의 개수, 저울에 올려본 쌍의 개수
	static int[][] weight; // 구슬들의 무게정보를 입력하는 배열
	static int[] heavier;
	static int[] lighter;
	static boolean[] hvisited;
	static boolean[] lvisited;
	static int ans;

	static StringBuilder sb = new StringBuilder();

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		weight = new int[M][2];
		
		heavier = new int[N + 1];
		lighter = new int[N + 1];
		hvisited = new boolean[N + 1];
		lvisited = new boolean[N + 1];

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			weight[i][0] = Integer.parseInt(st.nextToken());
			weight[i][1] = Integer.parseInt(st.nextToken());
		}
		// 입력 다받음

		for (int i = 1; i <= N; i++) { // 구슬 차례대로 검사
//			System.out.println(hdfs(i, new boolean[M]) + " " + ldfs(i, new boolean[M]));
			if (hdfs(i) > N / 2) {
				ans++;
				continue;
			} else if (ldfs(i) > N / 2) {
				ans++;
				continue;
			}
		}
		System.out.println(ans);
	}

	// 나보다 더 무거운 구슬 수 구하는 함수
	public static int hdfs(int n) {
		if (hvisited[n])
			return heavier[n]; // 이미 계산된 값이라면 그값 리턴.

		hvisited[n] = true;
		int result = 0;
		for (int i = 0; i < weight.length; i++) {
				if (weight[i][1] == n) { // 내가 가벼운쪽이라면
					result += hdfs(weight[i][0]) + 1;
				}
		}
		heavier[n] = result;
		return result;
	}

	// 나보다 더 가벼운 구슬 수 구하는 함수
	public static int ldfs(int n) {
		if (lvisited[n])
			return lighter[n]; // 이미 계산된 값이라면 그값 리턴.

		lvisited[n] = true;
		int result = 0;
		for (int i = 0; i < weight.length; i++) {
				if (weight[i][0] == n) { // 내가 무거운 쪽이라면
					result += ldfs(weight[i][1]) + 1;
				}
		}
		lighter[n] = result;
		return result;
	}
}
