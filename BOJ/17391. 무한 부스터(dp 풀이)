package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_17391_S1_dp {
	static int N,M;
	static int[][] map;
	static int[][] dp;
	static int[] dr = {0,1};	//우하
	static int[] dc = {1,0};
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());	
		map = new int[N][M];
		dp = new int[N][M];
		
		for(int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		// 입력 완료
		
		
		
		//dp에 값 넣음
		for(int i=0; i<N; i++) {
			for(int j=0; j<M; j++) {
				
				if(i==0 && j==0) dp[i][j]=0;
				int r=i, c=j;
				int booster = map[i][j];
				
				for(int d=0; d<2; d++) {
					for(int n=1; n<=booster; n++) {
						int nr = r+n*dr[d];
						int nc = c+n*dc[d];
						if(nr<N && nc<M) {			//범위 안의 값이라면
							if(dp[nr][nc]==0) {		//값이 없다면
								dp[nr][nc]=dp[r][c]+1;
							}
							else {	//이미 값이 있다면
								dp[nr][nc]=Math.min(dp[nr][nc], dp[r][c]+1);
							}
						}
					}
				}
			}
		}
//		for(int[] d : dp) {
//			System.out.println(Arrays.toString(d));
//		}
		System.out.println(dp[N-1][M-1]);
	}
}
