package ssafy_algo_0322;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

//최단경로. 다익스트라 알고리즘.
//pq 사용해서 최적화하자!!!
public class BOJ_1753_G5 {
	static int V, E; // V:정점의 갯수 E:간선의 갯수
	static ArrayList<Vertex>[] adj; // 인접리스트
	static PriorityQueue<Vertex> D;
	// static int[]D; //시작점에서 i정점까지 최단경로 저장하는 배열.
	static boolean[] U; // 선택된 정점 저장하는 배열.

	static class Vertex implements Comparable<Vertex> {
		int v; // 정점 번호
		int w; // 가중치

		public Vertex(int v, int w) {
			super();
			this.v = v;
			this.w = w;
		}

		@Override
		public int compareTo(Vertex o) {
			return this.w - o.w; // w 오름차순
		}

		@Override
		public String toString() {
			return "Vertex [v=" + v + ", w=" + w + "]";
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		V = Integer.parseInt(st.nextToken());
		E = Integer.parseInt(st.nextToken());

		int startV = Integer.parseInt(br.readLine()); // 시작정점의 번호
		D = new PriorityQueue<>(); // 1번 정점 ~ V번 정점
		U = new boolean[V + 1]; // 1번 정점 ~ V번 정점
		// 인접리스트 초기화
		adj = new ArrayList[V + 1];
		for (int i = 1; i <= V; i++) {
			adj[i] = new ArrayList<>();
		}

		for (int i = 0; i < E; i++) { // 간선 정보 입력받음.
			st = new StringTokenizer(br.readLine());
			int from = Integer.parseInt(st.nextToken());
			int to = Integer.parseInt(st.nextToken());
			int weight = Integer.parseInt(st.nextToken());
			adj[from].add(new Vertex(to, weight));
		}
		// 입력 완료.

		// 시작점에서 모든 정점으로의 최단경로를 구하시오.

		int[] result = new int[V + 1];
		Arrays.fill(result, Integer.MAX_VALUE);
		// U,D배열 초기화
		D.add(new Vertex(startV, 0)); // 시작점->시작점 최단경로=0

		// 시작정점부터 거리가 가장 작은거 선택.
		while(!D.isEmpty()) {
			Vertex vertex = D.peek();
			int curV = vertex.v;
			int curD = vertex.w;
			if (!U[curV]) {
				U[curV] = true; // curV 선택
				result[curV] = D.poll().w;

				for (int j = 0; j < adj[curV].size(); j++) {
					Vertex av = adj[curV].get(j);
					if (!U[av.v]) {
						D.add(new Vertex(av.v, curD + av.w));
					}
				}
			} else {		//이미 선택된 정점이라면
				D.poll();
			}
		}
		// ----------------------------------------- 정답 출력
		// System.out.println(Arrays.toString(result));
		StringBuilder sb = new StringBuilder();
		for (int i=1; i<result.length; i++) {
			if (result[i] == Integer.MAX_VALUE) {
				sb.append("INF");
			} 
			else {
				sb.append(result[i]);
			}
			sb.append("\n");
		}
		sb.setLength(sb.length() - 1);
		System.out.println(sb);
	}
}
