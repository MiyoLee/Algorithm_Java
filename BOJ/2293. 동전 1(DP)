package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

// 다이나믹 프로그래밍
public class BOJ_11047 {
	static int N,K;
	static int[] coin;
	static int[][] dp;
	
//	public static void print() {
//		StringBuilder sb = new StringBuilder();
//		for(int i=0; i<dp.length; i++) {
//			for(int j=0; j<dp[i].length; j++) {
//				sb.append(dp[i][j]).append(" ");
//			}
//			sb.append("\n");
//		}
//		System.out.println(sb);
//	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		
		N = Integer.parseInt(st.nextToken());		//동전의 종류
		K = Integer.parseInt(st.nextToken());		//만들려고 하는 가치.
		
		coin = new int[N+1];
		dp = new int[N+1][K+1];
		for(int i=1; i<N+1; i++) {
			coin[i] = Integer.parseInt(br.readLine());
		}
		// 입력 완료
		
		// i=1일때 초기화.
		dp[1][0]=1;
		for(int j=1; j<=K; j++) {
			if(coin[1] <= j && j%coin[1]==0) {
				dp[1][j] = 1;
			}
			else {
				dp[1][j] = 0;
			}
		}
		
		for(int i=2; i<=N; i++) {
			for(int j=0; j<=K; j++) {
				if(coin[i]>j) {
					dp[i][j] = dp[i-1][j];
				}
				else {
					dp[i][j] = dp[i-1][j];
					for(int n=1; n<=j/coin[i]; n++) {
						dp[i][j]+=dp[i-1][j-coin[i]*n];
					}
				}
			}
		}
		System.out.println(dp[N][K]);
	}
}
