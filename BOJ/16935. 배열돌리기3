package com.ssafy.hwalgo08;
 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_16935 {
	
	static int[][] map;
	static int[] command;
	
	public static void print() {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[i].length; j++) {
				sb.append(map[i][j]).append(" ");
			}
			sb.append("\n");
		}
		System.out.println(sb);
	}
	
	//상하반전
	public static void upDown() {		
		int N = map.length;
		int mid = N/2; 	// 하부의 시작
		for(int i=0; i<mid; i++) {
			for(int j=0; j<map[i].length; j++) {
				//swap
				int tmp = map[i][j];
				map[i][j]=map[N-1-i][j];
				map[N-1-i][j]=tmp;
			}
		}
	}
	//좌우반전
	public static void leftRight() {
		int M = map[0].length;
		int mid = M/2; 	// 우부의 시작
		for(int i=0; i<map.length; i++) {
			for(int j=0; j<mid; j++) {
				//swap
				int tmp = map[i][j];
				map[i][j]=map[i][M-1-j];
				map[i][M-1-j]=tmp;
			}
		}
	}
	public static void turnRight() {
		int N = map.length;
		int[][] tmap = new int[map[0].length][map.length];
		
		for(int i=0; i<tmap.length; i++) {
			for(int j=0; j<tmap[i].length; j++) {
				tmap[i][j]=map[N-1-j][i];
			}
		}
		//map<-tmap
		map = tmap;
	} 
	public static void turnLeft() {
		int M = map[0].length;
		int [][] tmap = new int[map[0].length][map.length];
		
		for(int i=0; i<tmap.length; i++) {
			for(int j=0; j<tmap[i].length; j++) {
				tmap[i][j]=map[j][M-1-i];
			}
		}
		//map<-tmap
		map = tmap;
	}
	public static void groupTurn1() {
	
		int N = map.length;
		int M = map[0].length;
		
		//임시 부분배열에 첫번째 그룹 저장.
		int[][]tmparr = new int[N/2][M/2];
		for(int i=0; i<tmparr.length; i++) {
			for(int j=0; j<tmparr[i].length; j++) {
				tmparr[i][j]=map[i][j];
			}
		}
		for(int i=0; i<N/2; i++) {		//4번그룹->1번그룹
			for(int j=0; j<M/2; j++) {
				map[i][j]=map[i+N/2][j];
			}
		}
		for(int i=N/2; i<N; i++) {		//3번그룹->4번그룹
			for(int j=0; j<M/2; j++) {
				map[i][j]=map[i][j+M/2];
			}
		}
		for(int i=N/2; i<N; i++) {		//2번그룹->3번그룹
			for(int j=M/2; j<M; j++) {
				map[i][j]=map[i-N/2][j];
			}
		}
		for(int i=0; i<N/2; i++) {		//1번그룹->2번그룹
			for(int j=M/2; j<M; j++) {
				map[i][j]=tmparr[i][j-M/2];
			}
		}
	}
	
	public static void groupTurn2() {
		
		int N = map.length;
		int M = map[0].length;
		
		//임시 부분배열에 첫번째 그룹 저장.
		int[][]tmparr = new int[N/2][M/2];
		for(int i=0; i<tmparr.length; i++) {
			for(int j=0; j<tmparr[i].length; j++) {
				tmparr[i][j]=map[i][j];
			}
		}
		for(int i=0; i<N/2; i++) {		//2번그룹->1번그룹
			for(int j=0; j<M/2; j++) {
				map[i][j]=map[i][j+M/2];
			}
		}
		for(int i=0; i<N/2; i++) {		//3번그룹->2번그룹
			for(int j=M/2; j<M; j++) {
				map[i][j]=map[i+N/2][j];
			}
		}
		for(int i=N/2; i<N; i++) {		//4번그룹->3번그룹
			for(int j=M/2; j<M; j++) {
				map[i][j]=map[i][j-M/2];
			}
		}
		for(int i=N/2; i<N; i++) {		//1번그룹->4번그룹
			for(int j=0; j<M/2; j++) {
				map[i][j]=tmparr[i-N/2][j];
			}
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");

		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		int R = Integer.parseInt(st.nextToken());
		
		map = new int[N][M];
		command = new int[R];
		
		for (int i = 0; i < map.length; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for (int j = 0; j < map[i].length; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		st = new StringTokenizer(br.readLine(), " ");
		for(int i=0; i<R; i++) {
			command[i]= Integer.parseInt(st.nextToken());
		}

		for(int i=0; i<command.length; i++) {
			switch (command[i]) {
			case 1:
				upDown(); 
				break;				//상하 반전
			case 2:
				leftRight();		//좌우 반전
				break;
			case 3:
				turnRight();  	//오른쪽으로 90도 회전
				break;
			case 4:
				turnLeft();		//왼쪽으로 90도 회전
				break;
			case 5:
				groupTurn1();	//부분배열 시계방향 회전
				break;
			case 6:	
				groupTurn2();	//부분배열 반시계방향 회전
				break;
			default:;
			}
		}
		print();
	}
}
