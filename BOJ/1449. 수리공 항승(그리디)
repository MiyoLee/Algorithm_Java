import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

// 그리디 
public class BOJ_1449 {
	static int N, L; // 1000 이하.
	static int[] pipe;
	static boolean[] isFixed;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken()); // 물이 새는 곳 개수
		L = Integer.parseInt(st.nextToken()); // 테이프의 길이

		pipe = new int[N];
		isFixed = new boolean[1001];	//1~1000
		
		st = new StringTokenizer(br.readLine(), " ");
		for(int i=0; i<N; i++) {
			pipe[i] = Integer.parseInt(st.nextToken());
		}
		// 입력 완료.
		
		// 연속된 L개까지 커버 가능.
		int cnt = 0;
		Arrays.sort(pipe);		//오름차순 정렬.
		
		for(int i=0; i<pipe.length; i++) {
			if(!isFixed[pipe[i]]) {	//아직 고쳐지지 않았다면
				for(int j=pipe[i]; j<Math.min(pipe[i]+L,1001); j++) {		//파이프는 1000번째가 끝이다.
					isFixed[j]=true;
				}
				++cnt;
			}
		}
		
		System.out.println(cnt);
	}
}
