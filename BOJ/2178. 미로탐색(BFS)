import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
// BFS로 풀어보자.

class Pos{
	int r,c;

	public Pos(int r, int c) {
		super();
		this.r = r;
		this.c = c;
	}
	
}
public class BOJ_2178_maze {
	private static int N, M;
	private static int[][] maze;
	
	private static int[] dr = { -1, 1, 0, 0 }; 	// 상하좌우
	private static int[] dc = { 0, 0, -1, 1 };
	private static boolean[][] visited;
	public static void BFS(int r, int c) {
		Queue<Pos> queue = new LinkedList<>();
		queue.offer(new Pos(r,c));				//시작점 큐에 넣음.
		
		while(!queue.isEmpty()) {
			
			Pos pos = queue.poll();
			int cr = pos.r;
			int cc = pos.c;
			if(cr==N && cc==M)return;
			visited[cr][cc]=true;
			
			for(int d=0; d<4; d++) {
				int nr = cr+dr[d];
				int nc = cc+dc[d];
				if(nr>=1 && nr<=N && nc>=1 && nc<=M && !visited[nr][nc] && maze[nr][nc]==1) {
					queue.offer(new Pos(nr,nc));
					maze[nr][nc]=maze[cr][cc]+1;
				}
			}
		}
	}
	
	public static void print() {
		StringBuilder sb = new StringBuilder();
		for (int i = 1; i < maze.length; i++) {
			for (int j = 1; j < maze[i].length; j++) {
				sb.append(maze[i][j]).append(" ");
			}
			sb.append("\n");
		}
		System.out.println(sb);
	}
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		maze = new int[N + 1][M + 1];
		visited = new boolean[N + 1][M + 1];
		
		for (int i = 1; i <= N; i++) {
			String tmp = br.readLine();
			for (int j = 1; j <= M; j++) {
				maze[i][j] = tmp.charAt(j - 1) - '0';
			}
		}
		
		// 입력 완료.
		BFS(1,1);
		System.out.println(maze[N][M]);
	}
}
