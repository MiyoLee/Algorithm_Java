package com.ssafy.hwalgo12;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_1987_G4 {
	static int N,M;
	static char[][]map;
	static boolean[] visitedAlpha;		//알파벳 방문했는지 체크
	static int[] dr = {-1,1,0,0};	//상하좌우
	static int[] dc = {0,0,-1,1};	//상하좌우
	static int Max;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		map = new char[N][M];
		visitedAlpha = new boolean[91];
		
		for(int i=0; i<N; i++) {
			String tmp = br.readLine();
			for(int j=0; j<M; j++) {
				map[i][j] = tmp.charAt(j);
			}
		}
//		for(char[] arr : map) {
//			System.out.println(Arrays.toString(arr));
//		}
		//입력 완료.
		Max = 0;
		
		dfs(1,0,0);
		System.out.println(Max);
	}

	private static void dfs(int cnt, int r, int c) {		//현재 탐색 위치
		visitedAlpha[map[r][c]] = true;		//알파벳 방문 표시.
		
		if(Max<cnt)Max=cnt;
		
		int nr,nc;
		for(int d=0; d<4; d++) {
			nr = r+dr[d];
			nc = c+dc[d];
			if(nr>=0 && nr<N && nc>=0 && nc<M && !visitedAlpha[map[nr][nc]]) {
				dfs(cnt+1, nr, nc);
				visitedAlpha[map[nr][nc]] = false;
			}
		}
	}
}
