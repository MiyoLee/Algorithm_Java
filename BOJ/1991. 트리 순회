package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

// 트리 순회

class Node {
	char data;
	Node left, right;

	public Node(char data) {
		super();
		this.data = data;
	}
}

class BinaryTree {
	Node root;

	public void add(char data, char leftData, char rightData) {
		if (root == null) {
			Node newNode = new Node(data);
			if(leftData!='.') {
				newNode.left = new Node(leftData);
			}
			if(rightData!='.') {
				newNode.right = new Node(rightData);
			}
			root = newNode;
		} 
		else {
			search(root, data, leftData, rightData);
		}
	}

	public void search(Node root, char data, char leftData, char rightData) {
		if (root == null) {
			return;
		}
		if (root.data==data) {
			if(leftData!='.') {
				root.left = new Node(leftData);
			}
			if(rightData!='.') {
				root.right = new Node(rightData);
			}
			return;
		}
		search(root.left, data, leftData, rightData);
		search(root.right, data, leftData, rightData);
	}

	public void preorder(Node root) {
		if (root == null) {
			return;
		}
		System.out.print(root.data);
		preorder(root.left);
		preorder(root.right);
	}

	public void inorder(Node root) {
		if (root == null) {
			return;
		}
		inorder(root.left);
		System.out.print(root.data);
		inorder(root.right);
	}

	public void postorder(Node root) {
		if (root == null) {
			return;
		}
		postorder(root.left);
		postorder(root.right);
		System.out.print(root.data);
	}
}

public class BOJ_1991 {
	static int N;

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());

		BinaryTree tree = new BinaryTree();

		for (int i = 0; i < N; i++) { // 트리에 add.
			st = new StringTokenizer(br.readLine(), " ");
			tree.add(st.nextToken().charAt(0), st.nextToken().charAt(0), st.nextToken().charAt(0));
		}
		tree.preorder(tree.root);
		System.out.println();
		tree.inorder(tree.root);
		System.out.println();
		tree.postorder(tree.root);
	}
}
