import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	private static int N, M;
	private static int[][] maze;
	private static int[][] dp;
	
	private static int[] dr = { -1, 1, 0, 0 }; // 상하좌우
	private static int[] dc = { 0, 0, -1, 1 };

	private static int DFS(int r, int c) { // maze[cr][cc] 까지 가기위해 거쳐야하는 최소 칸수
		maze[r][c] = 0;
		if (dp[r][c]<200) {
			return dp[r][c];
		}
		
		for (int d = 0; d < 4; d++) {
			int nr = r + dr[d];
			int nc = c + dc[d];
			if (nr >= 1 && nr <= N && nc >= 1 && nc <= M && maze[nr][nc] == 1) {
				dp[r][c] = Math.min(dp[r][c], 1 + DFS(nr, nc));
				maze[nr][nc]=1;
			}
		}
		
		return dp[r][c];
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		maze = new int[N + 1][M + 1];
		dp = new int[N + 1][M + 1];
		
		
		for (int i = 1; i <= N; i++) {
			String tmp = br.readLine();
			for (int j = 1; j <= M; j++) {
				maze[i][j] = tmp.charAt(j - 1) - '0';
			}
		}
		
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= M; j++) {
				dp[i][j] = 200;
			}
		}
		// 입력 완료.
		dp[1][1]=1;
		System.out.println(DFS(N, M));
		
//		for (int i = 1; i <= N; i++) {
//			for (int j = 1; j <= M; j++) {
//				System.out.print(dp[i][j]);
//			}
//			System.out.println();
//		}
	}
}
