package ssafy_algo_0324;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

//치즈. 힌트:BFS
public class BOJ_2636_G5 {
	static class Pos {
		int r, c;

		public Pos(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}
	}

	static int N, M; // 판의 세로 가로
	static int[][] map;
	static int[] dr = { -1, 1, 0, 0 }; // 상하좌우
	static int[] dc = { 0, 0, -1, 1 };
	static int count = 0;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 1) {
					count++;		//치즈갯수
				}
			}
		}
		// 입력 완료
		int time=0;
		int lastcnt=0;
		while(count>0) {
			lastcnt=count;
			bfs();
			time++;
		}
		System.out.println(time+"\n"+lastcnt);
	}
	
	// 공기와 접촉해있는 치즈부분을 없애는 함수.
	private static void bfs() {
		Queue<Pos>q = new LinkedList<>();
		boolean[][]visited = new boolean[N][M];
		// 가장자리 좌표를 큐에 모두 집어넣는다.
		for(int i=0; i<N; i++) {
			q.offer(new Pos(i,0));
			visited[i][0]=true;
			q.offer(new Pos(i,M-1));
			visited[i][M-1]=true;
		}
		for(int j=0; j<M-1; j++) {
			q.offer(new Pos(0,j));
			visited[0][j]=true;
			q.offer(new Pos(N-1,j));
			visited[N-1][j]=true;
		}
		
		while(!q.isEmpty()) {
			Pos cur = q.poll();
			int cr = cur.r;
			int cc = cur.c;
			
			for(int d=0; d<4; d++) {
				int nr = cr+dr[d];
				int nc = cc+dc[d];
				if(nr>=1 && nr<N-1 && nc>=1 && nc<M-1 && !visited[nr][nc]) {
					visited[nr][nc]=true;
					if(map[nr][nc]==0) {
						q.offer(new Pos(nr,nc));
					}else {
						map[nr][nc]=0;
						count--;
					}
				}
			}
		}
	}
}
