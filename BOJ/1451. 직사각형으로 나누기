package ssafy_algo_0215;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

//직사각형으로 나누기
public class BOJ_1451 {
	static int N, M;
	static int[][] map;
	static long answer = 0;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken()); // 세로크기
		M = Integer.parseInt(st.nextToken()); // 가로크기

		map = new int[N][M];

		for (int i = 0; i < N; i++) {
			String tmp = br.readLine();
			for (int j = 0; j < M; j++) {
				map[i][j] = tmp.charAt(j) - '0';
			}
		}
		// 입력 완료.

		// 1. 가로로 세조각 나누기.
		for (int i = 0; i < N - 2; i++) {
			for (int k = i + 1; k < N - 1; k++) {
				long a = sum(0, 0, i, M - 1);
				long b = sum(i + 1, 0, k, M - 1);
				long c = sum(k + 1, 0, N - 1, M - 1);
				answer = Math.max(answer, a * b * c);
			}
		}

		// 2. 세로로 세조각 나누기
		for (int j = 0; j < M - 2; j++) {
			for (int l = j + 1; l < M - 1; l++) {
				long a = sum(0, 0, N - 1, j);
				long b = sum(0, j + 1, N - 1, l);
				long c = sum(0, l + 1, N - 1, M - 1);
				answer = Math.max(answer, a * b * c);
			}
		}
		// 3. 왼쪽 세로블럭 1, 오른쪽 가로 블럭2개
		for (int j = 0; j < M - 1; j++) { // 왼쪽 세로블럭 범위
			for (int i = 0; i < N - 1; i++) { // 오른쪽 가로블럭 범위
				long a = sum(0, 0, N - 1, j);
				long b = sum(0, j + 1, i, M - 1);
				long c = sum(i + 1, j + 1, N - 1, M - 1);
				answer = Math.max(answer, a * b * c);
			}
		}

		// 4. 왼쪽 가로블럭 2, 오른쪽 세로 블럭1개
		for (int j = M - 1; j >= 1; j--) { // 오른쪽 세로블럭 범위
			for (int i = 0; i < N - 1; i++) { // 왼쪽 가로블럭 범위
				long a = sum(0, j, N - 1, M - 1);
				long b = sum(0, 0, i, j - 1);
				long c = sum(i + 1, 0, N - 1, j - 1);
				answer = Math.max(answer, a * b * c);
			}
		}

		// 5. 위쪽 가로블럭 1, 아래 세로 블럭2개
		for (int i = 0; i < N - 1; i++) { 
			for (int j = 0; j < M - 1; j++) { 
				long a = sum(0, 0, i, M - 1);
				long b = sum(i + 1, 0, N - 1, j);
				long c = sum(i + 1, j + 1, N - 1, M - 1);
				answer = Math.max(answer, a * b * c);
			}
		}

		// 6. 아래쪽 가로블럭 1, 위에 세로 블럭2개
		for (int i = N-1; i >= 1; i--) { 
			for (int j = 0; j < M - 1; j++) { 
				long a = sum(i, 0, N-1, M - 1);
				long b = sum(0, 0, i-1, j);
				long c = sum(0, j + 1, i-1, M - 1);
				answer = Math.max(answer, a * b * c);
			}
		}
		// 끝
	
		//정답 출력
		System.out.println(answer);
	}
	
	// map[r1][c1] ~ map[r2][c2] 사각형의 합 구하는 함수.
	public static long sum(int r1, int c1, int r2, int c2) {
		long result = 0;
		for (int i = r1; i <= r2; i++) {
			for (int j = c1; j <= c2; j++) {
				result += map[i][j];
			}
		}
		return result;
	}
}
