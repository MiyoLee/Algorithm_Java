package com.ssafy.hwalgo22;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_9205_S1 {
	static class Loc {
		int x, y;

		public Loc(int x, int y) {
			super();
			this.x = x;
			this.y = y;
		}
	}

	static int N; // 편의점의 갯수
	static Loc[] route;
	static int beer;
	static double[][] dp;
	static int MAX = 102;

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		int T = Integer.parseInt(br.readLine()); // 테스트케이스 수 입력받음
		for (int tc = 1; tc <= T; tc++) {
			N = Integer.parseInt(br.readLine()); // 편의점의 수 N 입력.
			route = new Loc[N + 2];

			for (int i = 0; i < N + 2; i++) {
				st = new StringTokenizer(br.readLine());
				route[i] = new Loc(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));
			}

			// 입력 완료.
			// route[0] ~ route[20] 최소 경로?
			// floyd 사용
			dp = new double[N + 2][N + 2]; // i를 경유해서 j로 가는 최소비용
			// dp 배열 초기화.
			for (int i = 0; i < N + 2; i++) {
				for (int j = 0; j < N + 2; j++) {
					if (i != j) { // 연결 안되어있으면
						dp[i][j] = MAX;
					}
				}
			}
			setDp();

			// floyd 알고리즘
			for (int k = 0; k < N + 2; k++) { // 경유지
				for (int i = 0; i < N + 2; i++) { // 출발지
					for (int j = 0; j < N + 2; j++) { // 도착지
						if (dp[i][j] > dp[i][k] + dp[k][j]) {
							dp[i][j] = dp[i][k] + dp[k][j];
						}
					}
				}
			}

			// 계산 완료
			if (dp[0][N + 1] < MAX) {
				System.out.println("happy");
			} else
				System.out.println("sad");
		}
	}

	private static void setDp() {
		for (int i = 0; i < N + 2; i++) {
			for (int j = i + 1; j < N + 2; j++) {
				double distance = Math.abs(route[i].x - route[j].x) + Math.abs(route[i].y - route[j].y);
				if (distance <= 1000)
					dp[i][j] = dp[j][i] = 1; // 거리가 1000이하인 경우에만 연결되어있다고 판단.
			}
		}
	}
}
