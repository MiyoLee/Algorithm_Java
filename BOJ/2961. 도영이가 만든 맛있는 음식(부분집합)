package ssafy_algo_0215;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_2961 {
	static int N;
	static int[] S;
	static int[] B;
	static int min = Integer.MAX_VALUE;

	public static boolean empty(boolean[] arr) {
		int i;
		for (i = 0; i < arr.length; i++) {
			if (arr[i] == true) {
				break;
			}
		}
		if (i >= arr.length) {
			return true;
		} else
			return false;
	}

	public static void powerSet(int cnt, boolean[] isSelected) {
		if (cnt == N+1) { // 모두 검사 했고, 공집합 아닐때
			if (!empty(isSelected)) {
				int s = 1;
				int b = 0;
				for (int i = 1; i < isSelected.length; i++) {
					if (isSelected[i]) {
						s *= S[i];
						b += B[i];
					}
				}
				min = Math.min(min, Math.abs(s - b));
			}
			return;
		}
		isSelected[cnt] = true;
		powerSet(cnt + 1, isSelected);
		isSelected[cnt] = false;
		powerSet(cnt + 1, isSelected);
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
		S = new int[N + 1];
		B = new int[N + 1];

		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			S[i] = Integer.parseInt(st.nextToken());
			B[i] = Integer.parseInt(st.nextToken());
		}
		// 입력 완료.
		powerSet(1, new boolean[N + 1]);
		System.out.println(min);
	}
}
