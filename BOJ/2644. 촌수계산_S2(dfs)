package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.StringTokenizer;

//촌수 계산
public class BOJ_2644_S2 {
	static int N,M;		//전체 사람의 수, 관계의 수
	static int a,b;
	static int[] parent;
	static HashMap<Integer,ArrayList<Integer>> fam = new HashMap<>();		//key : 부모 , value: 자식 목록
	static boolean[] visited;
	static int ans;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
		
		parent = new int[N+1];						//부모 노드를 저장.
		
		st = new StringTokenizer(br.readLine());
		a = Integer.parseInt(st.nextToken());		//a와 b의 촌수를 계산해야됨.
		b = Integer.parseInt(st.nextToken());
		
		M = Integer.parseInt(br.readLine());		//관계의 수
		
		
		for(int i=0; i<=N; i++) {
			fam.put(i, new ArrayList<>());
		}
		
		for(int i=0; i<M; i++) {
			st = new StringTokenizer(br.readLine());
			int p = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			parent[c]=p;
			fam.get(p).add(c);
		};
		
		//입력 완료
		
		visited = new boolean[N+1];
		//a와 b의 촌수 계산
		ans=-1;
		
		visited[a]=true;
		calc(0, a);
		
		System.out.println(ans);
	}
	public static void calc(int cnt, int cur) {
		visited[cur]=true;
		if(cur==b) {
			ans=cnt;
			return;
		}
		
		for(int i=0; i<fam.get(cur).size(); i++) {
			if(!visited[fam.get(cur).get(i)]) {
				calc(cnt+1, fam.get(cur).get(i));
			}
		}
		if(parent[cur]!=0 && !visited[parent[cur]]) {
			calc(cnt+1, parent[cur]);
		}
	}
}
