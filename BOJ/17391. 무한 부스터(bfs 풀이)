package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_17391_S1 {
	static int N,M;
	static int[][]map;
	static int min = Integer.MAX_VALUE;
	static int[] dr = {1,0};	//하 우 
	static int[] dc = {0,1};
	static boolean[][] visited;
	
	static class Pos{
		int r,c,level;
		public Pos(int r, int c, int level) {
			super();
			this.r = r;
			this.c = c;
			this.level = level;
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		
		visited = new boolean[N][M];
		
		for(int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<M; j++) {
				map[i][j]=Integer.parseInt(st.nextToken());
			}
		}
		//입력완료
		
		move(0, 0);
		
		System.out.println(min);
	}
	
	public static void move(int r, int c) {			//시작 위치
		Queue<Pos>q = new LinkedList<>();
		q.offer(new Pos(r,c,0));
		visited[r][c] = true;
		
		while(!q.isEmpty()) {
			Pos p = q.poll();
			int cr = p.r;
			int cc = p.c;
			int cl = p.level;
			int booster = map[cr][cc];
			
			if(cr==N-1 && cc==M-1) {		//다왔다
				min=cl;
				break;
			}
			
			for(int d=0; d<2; d++) {
				for(int n=booster; n>=1; n--) {
					int nr = cr+n*dr[d];
					int nc = cc+n*dc[d];
					if(nr<N && nc<M && cl+1<min && !visited[nr][nc]) {
						visited[nr][nc]=true;
						q.offer(new Pos(nr,nc,cl+1));
					}
				}
			}
		}
	}
}
