package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_3190_G5 {
	static int N; // 보드의 크기
	static int K; // 사과의 갯수
	static int L; // 뱀의 방향 변환 횟수
	static int[][] map;
	static int[][] dir;
	static int time = 0;
	static String curDir;

	static class Pos{
		int r,c;

		public Pos(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}
		
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
		K = Integer.parseInt(br.readLine());

		map = new int[N + 1][N + 1]; // 1행 1열 ~ N행 N열
		
		for (int i = 0; i < K; i++) { // 사과의 위치 입력받음.
			st = new StringTokenizer(br.readLine());
			// 사과가 있는 칸은 1로.
			map[Integer.parseInt(st.nextToken())][Integer.parseInt(st.nextToken())] = 1;
		}

		L = Integer.parseInt(br.readLine()); // 뱀의 방향 변환 횟수 입력.
		dir = new int[L+1][2];
		for (int i = 0; i < L; i++) { // 방향 정보 입력
			st = new StringTokenizer(br.readLine());
			dir[i][0] = Integer.parseInt(st.nextToken());
			dir[i][1] = st.nextToken().charAt(0);
		}
		dir[L][0]=10000;
		// 게임 시작 시간으로부터 X초가 끝난 뒤에 왼쪽(L) 또는 오른쪽(D)로 90도 방향을 회전시킨다
		// 입력 완료

		// 이 게임이 몇 초에 끝나는지 계산하라.
		Queue<Pos>q = new LinkedList<>();		//뱀의 위치 저장할 큐.
		int r = 1, c = 1; // 뱀의 머리의 위치
		q.offer(new Pos(r,c));
		map[r][c]=2;
		curDir = "right"; // 현재 방향
		
		for(int i=0; i<=L; i++) {
			int nr = r, nc = c;
			
			while (time<dir[i][0]) {		//다음 방향전환 만날때까지 쭉감
				if (curDir == "up") {
					nr = r - 1;
					nc = c;
				} else if (curDir == "down") {
					nr = r + 1;
					nc = c;
				} else if (curDir == "left") {
					nr = r;
					nc = c - 1;
				} else if (curDir == "right") {
					nr = r;
					nc = c + 1;
				}
				if (nr >= 1 && nr <= N && nc >= 1 && nc <= N && map[nr][nc]!=2) { // 범위 안에 있고 뱀의 몸과 만나지 않았을 경우
					if (map[nr][nc] != 1) {			// 사과가 없는 경우
						map[nr][nc]=2;				//머리를 움직임
						q.offer(new Pos(nr,nc));	//움직인 위치 저장
						Pos tail = q.poll();
						map[tail.r][tail.c]=0;
					}
					else {							//사과를 먹었을경우
						map[nr][nc]=2;				//머리만 움직임
						q.offer(new Pos(nr,nc));	//움직인 위치 저장
					}
					r=nr;						//이동
					c=nc;
					time++;						//1초 지남
				} else { 						// 벽에 부딪히거나 몸과 부딪힐 경우
					time++; 					// 1초 지남
					System.out.println(time);
					return;
				}
				
			}
			// time=3  방향 전환 만남.
			if (dir[i][1] == 'L') { // 왼쪽으로 90도 회전
				if (curDir == "up")
					curDir = "left";
				else if (curDir == "down")
					curDir = "right";
				else if (curDir == "left")
					curDir = "down";
				else if (curDir == "right")
					curDir = "up";
			} 
			else { 					// 오른쪽으로 90도 회전
				if (curDir == "up")
					curDir = "right";
				else if (curDir == "down")
					curDir = "left";
				else if (curDir == "left")
					curDir = "up";
				else if (curDir == "right")
					curDir = "down";
			}
			
		}
	}
}
