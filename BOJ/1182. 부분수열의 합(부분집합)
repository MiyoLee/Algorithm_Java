package ssafy_algo_0215;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_1182 {
	static int N, S;
	static int[] input;
	static int cases = 0;

//	public static boolean empty(boolean[] isSelected) {
//		int i;
//		for(i=0; i<isSelected.length; i++) {
//			if(isSelected[i])break;
//		}
//		if(i>=isSelected.length) {
//			return true;
//		}
//		else return false;
//	}
	public static void powerSet(int cnt, boolean[] isSelected) {
		if (cnt == N) {
			boolean flag = true;		//비어있으면 true, 비어있지 않으면 false
			int sum = 0;
			for (int i = 0; i < isSelected.length; i++) {
				if (isSelected[i]) {
					sum += input[i];
					flag = false;
				}
			}
			if (sum == S && !flag) {	//비어있지 않고 sum==S라면
				++cases;
			}
			return;
		}
		isSelected[cnt] = true;
		powerSet(cnt + 1, isSelected);
		isSelected[cnt] = false;
		powerSet(cnt + 1, isSelected);

	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");

		N = Integer.parseInt(st.nextToken());
		S = Integer.parseInt(st.nextToken());

		input = new int[N];
		st = new StringTokenizer(br.readLine(), " ");
		for (int i = 0; i < N; i++) {
			input[i] = Integer.parseInt(st.nextToken());
		}
		powerSet(0, new boolean[N]);

		System.out.println(cases);
	}
}
