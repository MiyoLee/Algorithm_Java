package ssafy_algo_0326;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

//연구소.
public class BOJ_14502_G5 {
	static class Pos {
		int r, c;

		public Pos(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}

		@Override
		public String toString() {
			return "Pos [r=" + r + ", c=" + c + "]";
		}

	}

	static int N, M;
	static int[][] map;
	static List<Pos> virus;
	static List<Pos> safe;
	static boolean[][] visited;
	static int[] dr = { -1, 1, 0, 0 }; // 상하좌우
	static int[] dc = { 0, 0, -1, 1 };
	static int safeCnt; // 안전영역의 갯수
	static int maxCnt;	// 정답
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken()); // 세로크기
		M = Integer.parseInt(st.nextToken()); // 가로크기

		map = new int[N][M];
		safeCnt = 0;
		virus = new ArrayList<>();
		safe = new ArrayList<>();
		
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 2) { // 바이러스가 있는 위치를 큐에 넣는다.
					virus.add(new Pos(i, j));
				} else if (map[i][j] == 0) {
					safe.add(new Pos(i,j));
					safeCnt++;
				}
			}
		}
		// 입력 완료.
		maxCnt=0;
		dfs(0, new Pos[3], 0);
		System.out.println(maxCnt);
	}
	private static void dfs(int cnt, Pos[] selected, int startIdx) {		//지금까지 선택한 벽의 위치 갯수, 선택된 위치
		if(cnt==3) {
			bfs(selected);
			return;
		}
		for(int i=startIdx; i<safe.size(); i++) {
			selected[cnt]=safe.get(i);
			dfs(cnt+1, selected, i+1);
		}
	}
	private static void bfs(Pos[] walls) {
		int count = safeCnt-3;
		int[][] map2 = new int[N][M];
		for(int i=0; i<N; i++) {
			map2[i] = Arrays.copyOf(map[i], map[i].length);
		}
		
		Queue<Pos>queue = new LinkedList<>();
		for(Pos p : virus) {
			queue.offer(p);
		}
		for(Pos w : walls) {
			map2[w.r][w.c]=1;
		}
		//초기화 완료.
		
		//탐색 시작
		while (!queue.isEmpty()) {
			if(count < maxCnt)return;
			Pos p = queue.poll();
			int cr = p.r;
			int cc = p.c;
			
			for (int d = 0; d < 4; d++) {
				int nr = cr + dr[d];
				int nc = cc + dc[d];
				if (nr >= 0 && nr < N && nc >= 0 && nc < M && map2[nr][nc] == 0) {
					count--;
					map2[nr][nc] = 2;
					queue.offer(new Pos(nr, nc));
				}
			}
		}
		if(count > maxCnt ) maxCnt=count;
	}
}
