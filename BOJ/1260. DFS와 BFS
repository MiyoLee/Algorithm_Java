package ssafy_algo_0316;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

//dfs와 bfs
public class BOJ_1260_S2 {
	static int N,M,V;
	static int[][] adj;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());		//정점의 개수
		M = Integer.parseInt(st.nextToken());		//간선의 개수
		V = Integer.parseInt(st.nextToken());		//탐색 시작 정점 번호
		
		adj = new int[N+1][N+1];		//정점 1~N
		for(int i=0; i<M; i++) {		//간선 정보 입력
			st = new StringTokenizer(br.readLine());
			int from = Integer.parseInt(st.nextToken());
			int to = Integer.parseInt(st.nextToken());
			
			adj[from][to]=1;
			adj[to][from]=1;
		}
		//입력 완료
		dfs(V, new boolean[N+1]);
		System.out.println();
		bfs(V);
		
	}
	private static void bfs(int start) {
		boolean[] visited = new boolean[N+1];		//정점 방문 여부 체크하는 배열
		Queue<Integer>q = new LinkedList<>();
		
		visited[start]=true;
		q.offer(start);
		
		while(!q.isEmpty()) {
			int cur = q.poll();
			System.out.print(cur+" ");
			
			for(int i=1; i<=N; i++) {
				if(adj[cur][i]==1 && !visited[i]) {	//인접해있고 아직 방문 안한 정점이라면
					visited[i]=true;
					q.offer(i);
				}
			}
		}
	}
	
	private static void dfs(int cur, boolean[] visited) {
		visited[cur]=true;
		System.out.print(cur+" ");
		for(int i=1; i<=N; i++) {
			if(adj[cur][i]==1 && !visited[i]) {	//인접해있고 아직 방문 안한 정점이라면
				dfs(i, visited);
			}
		}
	}
}
