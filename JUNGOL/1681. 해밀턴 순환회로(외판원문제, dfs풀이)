package com.ssafy.hwalgo19;
//해밀턴 순환회로 : 외판원 문제
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class JO_1681 {
	static int N;
	static int[][]adj;
	static boolean[] visited;
	static int ans;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		N = Integer.parseInt(br.readLine());
		adj = new int[N+1][N+1];
		visited = new boolean[N+1];
		
		for(int i=1; i<=N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=1; j<=N; j++) {
				adj[i][j]=Integer.parseInt(st.nextToken());
			}
		}
		//입력 완료.
		//초기화
		ans=Integer.MAX_VALUE;
		dfs(0,1,0,1);
		System.out.println(minCost);
	}
	
	static int minCost=Integer.MAX_VALUE;
	private static void dfs(int cnt, int cur, int cost, int start) {
		if(cost > minCost) return;
		if(cnt==N) {
			if(cur==start) {	//정답중 한개. 비용 구하자
				if(cost<minCost)minCost=cost;
			}
			return;
		}
		for(int i=1; i<=N; i++) {
			if(!visited[i] && adj[cur][i]!=0) {
				visited[i]=true;
				dfs(cnt+1, i, cost+adj[cur][i], start);
				visited[i]=false;
			}
		}
	}
}
