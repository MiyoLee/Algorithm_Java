package ssafy_algo_0225;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class SWEA_프로세서 {
	static int N,max,totalCnt,min;
	static int[][] map;
	static int[] dr = {-1,1,0,0};
	static int[] dc = {0,0,-1,1};
	static List<Pos> list;		//고려해야하는 코어의 위치만 담고 있는 리스트(가장자리 코어는 배제)
	
	static class Pos{
		int r,c;
		public Pos(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}
		
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		
		int T = Integer.parseInt(br.readLine());
		for(int tc=1; tc<=T; tc++) {
			
			N = Integer.parseInt(br.readLine());		//셀 크기 : NxN
			map = new int[N][N];
			list = new ArrayList<>();					
			max=0;						//연결할 수 있는 코어 갯수의 최대값
			min=Integer.MAX_VALUE;		//코어를 최대 갯수 연결했을때 전선 길이의 최솟값
			totalCnt=0;					//관리해야하는 코어의 총 갯수.
			
			for(int i=0; i<N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					map[i][j]=Integer.parseInt(st.nextToken());
					if(i==0 || j==0 || i==N-1 | j==N-1) continue;	//가장자리는 무시
					else if(map[i][j]==1) {
						list.add(new Pos(i,j));
						totalCnt++;
					}
				}
			}
			
			go(0, 0, 0);
			System.out.println("#"+tc+" "+min);
		}
	}
	
	//5C1 5C2 5C3 5C4 5C5 (연결할 코어 갯수를 조합으로 선택) ----> 부분집합의 논리			
	private static void go(int index, int cCnt, int length) {	//index : 부분집합에 고려할 코어 인덱스, cCnt : 연결된 코어개수, length : 지금까지 전선길이
		if(index==totalCnt) {	//다 했다
			if(cCnt>max) {
				max = cCnt;
				min = length;
			}else if (cCnt==max && length < min){				
				min=length;
			}
			return;
		}
		// 코어 선택. 전선 놓아보기(4방향)
		Pos cur = list.get(index);
		int r = cur.r;
		int c = cur.c;
		for (int d = 0; d < 4; d++) {
			if(isAvailable(r, c, d)) {		// d방향으로 끝까지 전선 연결할 수 있다면
				//전선 놓기
				int tmp = setStatus(r, c, d, 2);
				//다음 코어로 넘어가기
				go(index+1, cCnt+1, length+tmp);
				//전선 놓은것 회수하기
				setStatus(r, c, d, 0);
			}
		}
		// 코어 비선택
		go(index+1, cCnt, length);
	}
	

	//r,c 위치에서 d방향으로 끝까지 갈수 있으면 전선 길이 반환, 갈수 없으면 0반환하는 함수.
	private static boolean isAvailable(int r, int c, int d) {		//현재 위치 : r,c  현재 방향  : d
		int nr=r, nc=c;
		while(true) {
			nr+=dr[d];
			nc+=dc[d];
			if(nr<0 || nr>=N || nc<0 || nc>=N) break;		//끝까지 연결 되었다!
			if(map[nr][nc]>=1) return false;					//코어나 전선을 만났다 !
		}
		return true;
	}
	
	private static int setStatus(int r, int c, int d, int s) {		//s: 현재 상태. 2-전선 놓기, 0-회수
		int len=0;
		int nr=r, nc=c;
		while(true) {
			nr+=dr[d];
			nc+=dc[d];
			if(nr<0 || nr>=N || nc<0 || nc>=N) break;		//끝까지 연결 되었다!
			map[nr][nc] = s;	
			len++;
		}
		return len;
	}
}
