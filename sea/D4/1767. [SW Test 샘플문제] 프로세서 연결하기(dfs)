import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

class Solution{
	static int N;
	static int[][] cell;
	static List<Pos>core;
	static int[] dr = {-1,1,0,0};	//상하좌우
	static int[] dc = {0,0,-1,1};	//상하좌우
	static int maxconnected;
	static int ans;
	static class Pos{
		int r,c;

		public Pos(int r, int c) {
			super();
			this.r = r;
			this.c = c;
		}

		@Override
		public String toString() {
			return "Pos [r=" + r + ", c=" + c + "]";
		}
		
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		int T = Integer.parseInt(br.readLine());
		
		for(int tc=1; tc<=T; tc++) {
			N = Integer.parseInt(br.readLine());
			cell = new int[N][N];		
			core = new ArrayList<Pos>();		//전선을 연결해야하는 코어들.
			
			for(int i=0; i<N; i++) {
				st = new StringTokenizer(br.readLine());
				for(int j=0; j<N; j++) {
					cell[i][j]=Integer.parseInt(st.nextToken());
					if(cell[i][j]==1 && (i!=0 && i!=N-1 && j!=0 && j!=N-1)) {
						core.add(new Pos(i,j));
					}
				}
			}
			//입력 완료ok
			maxconnected=0;
			ans=0;
			dfs(0, 0, 0);
			System.out.println("#"+tc+" "+ans);
		}
	}
	
	//현재 탐색하는 코어번호, 연결된 코어 갯수, 지금까지 전선의 길이
	private static void dfs(int num, int connected, int length) {		
		if(num==core.size()) {		//다했다
			//연결된 코어가 최대거나, 연결된 코어는 같으면서 길이는 최소이면 값들 갱신.
			if(connected > maxconnected || connected == maxconnected && length<ans) {
				maxconnected = connected;
				ans = length;
			}
			return;
		}
		Pos cur = core.get(num);
		
		for(int d = 0; d < 4; d++) {	//상하좌우 탐색
			int nr = cur.r;
			int nc = cur.c;
			while(true) {
				nr+=dr[d];
				nc+=dc[d];
				if(nr<0 || nr>=N || nc<0 || nc>=N || cell[nr][nc]!=0) {
					break;
				}
			}
			if(nr<0 || nr>=N || nc<0 || nc>=N) {	//범위를 벗어난것이라면
				//여기까지 전선 표시하기!
				nr-=dr[d];
				nc-=dc[d];
				connect(cur.r, cur.c, nr, nc);
				//다음 코어를 탐색!
				dfs(num+1, connected+1, length + Math.abs(nr-cur.r) + Math.abs(nc-cur.c));
				//리턴했으면 연결 해제
				disconnect(cur.r, cur.c, nr, nc);
			}
		}
		dfs(num+1, connected, length);		//연결 안함
	}
	
	
	private static void connect(int sr, int sc, int er, int ec) {
		if(sr<er) {
			for(int i=sr+1; i<=er; i++) {
				cell[i][sc]=1;
			}
		}
		else if(sr>er) {
			for(int i=er; i<=sr-1; i++) {
				cell[i][sc]=1;
			}
		}
		else if(sc<ec) {
			for(int j=sc+1; j<=ec; j++) {
				cell[sr][j]=1;
			}
		}
		else if(sc>ec) {
			for(int j=ec; j<=sc-1; j++) {
				cell[sr][j]=1;
			}
		}
	}
	private static void disconnect(int sr, int sc, int er, int ec) {
		if(sr<er) {
			for(int i=sr+1; i<=er; i++) {
				cell[i][sc]=0;
			}
		}
		else if(sr>er) {
			for(int i=er; i<=sr-1; i++) {
				cell[i][sc]=0;
			}
		}
		else if(sc<ec) {
			for(int j=sc+1; j<=ec; j++) {
				cell[sr][j]=0;
			}
		}
		else if(sc>ec) {
			for(int j=ec; j<=sc-1; j++) {
				cell[sr][j]=0;
			}
		}
	}
}
