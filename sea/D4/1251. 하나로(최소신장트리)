package com.ssafy.hwalgo21;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;


//최소신장트리 문제
//kruskal로 풀어보자.
public class SWEA_1251_D4 {
	static class Edge implements Comparable<Edge>{
		int from,to;
		double weight;

		public Edge(int from, int to, double weight) {
			super();
			this.from = from;
			this.to = to;
			this.weight = weight;
		}

		@Override
		public String toString() {
			return "Edge [from=" + from + ", to=" + to + ", weight=" + weight + "]";
		}

		@Override
		public int compareTo(Edge o) {						//가중치 오름차순
			//return this.weight - o.weight;
			return Double.compare(this.weight, o.weight);	//혹시나 발생할 오버플로우나 언더플로우 방지. 앞에거에서 뒤에거 뺌
		}
		
	}
	static int N;
	static double E;
	//static double[][]adj;
	static int[] parent;
	static long[]x;
	static long[]y;
	static List<Edge> edges;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		int T = Integer.parseInt(br.readLine());
		for(int tc=1; tc<=T; tc++) {
			N = Integer.parseInt(br.readLine());
			//adj = new double[N][N];
			parent = new int[N];		//0번 노드~ N-1번 노드
			x= new long[N];
			y= new long[N];
			edges = new ArrayList<Edge>();
			
			st = new StringTokenizer(br.readLine());
			for(int i=0; i<N; i++) {
				x[i]=Integer.parseInt(st.nextToken());
			}
			st = new StringTokenizer(br.readLine());
			for(int i=0; i<N; i++) {
				y[i]=Integer.parseInt(st.nextToken());
			}
			
			E = Double.parseDouble(br.readLine());
			//입력 완료
			setEdge();	//간선 정보 리스트 입력
			make();		//단일 집합들 생성
			
			Collections.sort(edges);		//가중치 오름차순 정렬
			
			double result = 0;
			int cnt=0;
			for(int i=0; i<edges.size(); i++) {
				Edge e = edges.get(i);
				if(union(e.from, e.to)) {
					result+=e.weight;
					if(++cnt == N-1)break;
				}
			}
			System.out.println("#"+tc+" "+Math.round(result));
		}
	}
	private static void setEdge() {
		//i번 노드와 j번노드 사이 가중치 set.
		for(int i=0; i<N; i++) {
			for(int j=i+1; j<N; j++) {
				if(i!=j) {
					double weight = E * ((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
					//adj[i][j] = adj[j][i] = weight;
					edges.add(new Edge(i,j,weight));
				}
			}
		}
	}
	private static void make() {
		for(int i=0; i<N; i++) {
			parent[i]=i;
		}
	}
	//i 노드의 루트노드 번호 리턴하는 함수
	private static int findSet(int i) {	
		if(parent[i]==i)return i;
		return parent[i] = findSet(parent[i]);
	}
	//a가 속한 집합과 b가 속한 집합을 합치는 함수
	private static boolean union(int a, int b) {
		int aRoot = findSet(a);
		int bRoot = findSet(b);
		if(aRoot==bRoot)return false;
		parent[bRoot]=aRoot;
		return true;
	}
}
