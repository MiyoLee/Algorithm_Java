package ssafy_algo_0318;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

//서로소집합
public class SWEA_3289_D4 {
	static int N,M;
	static int[][] command;
	static int[] parents;
	static StringBuilder sb;
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		
		int T = Integer.parseInt(br.readLine());
		for(int tc=1; tc<=T; tc++) {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());		//1~N 집합.
			M = Integer.parseInt(st.nextToken());		//연산의 개수
			
			parents = new int[N+1];		//1~N
			command = new int[M][3];
			for(int i=0; i<M; i++) {
				st = new StringTokenizer(br.readLine());
				command[i][0]=Integer.parseInt(st.nextToken());
				command[i][1]=Integer.parseInt(st.nextToken());
				command[i][2]=Integer.parseInt(st.nextToken());
			}
			// 입력 완료.
			sb = new StringBuilder();
			sb.append("#").append(tc).append(" ");
			
			make();
			
			for(int i=0; i<M; i++) {
				if(command[i][0]==0) {		//union
					union(command[i][1], command[i][2]);
				}
				else {						//같은집합인지 체크. 같은집합이면 1, 아니면 0
					sb.append(isSameSet(command[i][1], command[i][2]));
				}
			}
			System.out.println(sb);
		}
	}
	private static void make() {	//원소 하나인 집합을 만든다.
		for(int i=1; i<=N; i++) {
			parents[i]=i;
		}
	}
	private static int findSet(int a) {	//a를 포함하고있는 집합의 root를 찾는다.
		if(a==parents[a]) return a;
		return findSet(parents[a]);
	}
	
	private static boolean union(int a, int b){		//합집합 연산
		int aRoot = findSet(a);
		int bRoot = findSet(b);
		if(aRoot==bRoot)return false;
		parents[bRoot]=(parents[b]=aRoot);
		return true;
	}
	private static int isSameSet(int a, int b){		//합집합 연산
		int aRoot = findSet(a);
		int bRoot = findSet(b);
		if(aRoot==bRoot)return 1;
		return 0;
	}
}
