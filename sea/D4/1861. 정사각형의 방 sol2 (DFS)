package ssafy_algo_0205;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class SWEA_1861_D4 {
	private static int N;
	private static int[][] map;
	private static int[][] dp;
	private static int[] dr = { -1, 1, 0, 0 }; // 상 하 좌 우
	private static int[] dc = { 0, 0, -1, 1 };
	
	
	private static int DFS(int r, int c) {
		if(dp[r][c] != 0) {
			return dp[r][c];
		}
		dp[r][c]=1;
		for(int d=0; d<4; d++) {
			int nr = r + dr[d];
			int nc = c + dc[d];
			if(nr>=0 && nr<N && nc>=0 && nc<N && map[nr][nc]==map[r][c]+1) {
				dp[r][c]=Math.max(dp[r][c],1+DFS(nr,nc));
			}
		}
		return dp[r][c];
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= T; tc++) {
			int[] max= {1,1}; 					// max[0]=출발 방번호 max[1]=최대 방문 방 갯수
			N = Integer.parseInt(br.readLine());
			map = new int[N][N]; 
			dp = new int[N][N];
			for (int i = 0; i < N; i++) {
				StringTokenizer st = new StringTokenizer(br.readLine(), " ");
				for (int j = 0; j < N; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			// 입력 완료.
			
			for(int i=0; i<N; i++) {
				for(int j=0; j<N; j++) {
					int r = DFS(i,j);
					if(r>max[1] || (r==max[1] && map[i][j]<max[0])) {
						max[0]=map[i][j];
						max[1]=r;
					}
				}
			}
			
			StringBuilder sb = new StringBuilder();
			sb.append("#").append(tc).append(" ").append(max[0]).append(" ").append(max[1]);
			System.out.println(sb);
		}
	}
}
