package ssafy_algo_0219;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

//요리사
public class SWEA_4012 {
	static int N;
	static int[][] S;
	static int A,B;
	static int ans;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int T = Integer.parseInt(st.nextToken());
		for(int tc=1; tc<=T; tc++) {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());		//4~16 짝수.
			
			S = new int[N+1][N+1];						//재료 1~N
			
			ans = Integer.MAX_VALUE;
			
			for(int i=1; i<=N; i++) {
				st = new StringTokenizer(br.readLine());
				for(int j=1; j<=N; j++) {
					S[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			// 입력 완료.
			Comb(0, new int[N/2], new boolean[N+1], 1);
			
			StringBuilder sb = new StringBuilder();
			sb.append("#").append(tc).append(" ").append(ans);
			System.out.println(sb);
		}
	}
	public static void Comb(int cnt, int[]selected, boolean[]isSelected, int startIdx) {
		if(cnt==N/2) {		//절반 다 뽑았으면
			A=0;
			B=0;
			calc(selected, isSelected);
			ans = Math.min(ans, Math.abs(A-B));
			return;
		}
		for(int i=startIdx; i<=N; i++) {
			selected[cnt]=i;		//뽑은 재료의 인덱스 저장
			isSelected[i]=true;
			Comb(cnt+1, selected, isSelected, i+1);
			isSelected[i]=false;
		}
	}
	
	//A음식의 시너지의 합과 B음식의 시너지의 합 구하는 함수
	public static void calc(int[] selected, boolean[] isSelected) {
		//A 시너지합 구하기
		for(int i=0; i<selected.length; i++) {			//두개 뽑아서
			for(int j=i+1; j<selected.length; j++) {
				A+=S[selected[i]][selected[j]]+S[selected[j]][selected[i]];					
			}
		}
		//B 재료 배열 만들기
		int[]notSelected = new int[N/2];
		int index = 0;
		for(int k = 1; k<isSelected.length; k++) {
			if(!isSelected[k]) {	//k는 B의 재료
				notSelected[index++]=k;
			}
		}
		// B시너지합 구하기
		for(int i=0; i<notSelected.length; i++) {			//두개 뽑아서
			for(int j=i+1; j<notSelected.length; j++) {
				B+=S[notSelected[i]][notSelected[j]]+S[notSelected[j]][notSelected[i]];							
			}
		}
	}
}
