package swea;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

//달팽이 숫자
//DFS로 풀어보자.
public class SWEA_1954_D2 {
	static int N;
	static int[][]map;
	static int[] dr = {0,1,0,-1};	//우 하 좌 상
	static int[] dc = {1,0,-1,0};	//우 하 좌 상
//	public static void DFS(int n, int r, int c, int d) {	//n:현재 숫자  d:현재 방향
//		map[r][c]=n;
//		if(n==N*N) {
//			return;
//		}
//		int nr = r+dr[d%4];
//		int nc = c+dc[d%4];
//		if(nr>=0 && nr<N && nc>=0 && nc<N && map[nr][nc]==0) {
//			DFS(n+1,nr,nc,d);		//방향은 그대로.
//		}
//		else {
//			DFS(n,r,c,d+1);			//방향 전환
//		}
//	}
	public static void print() {
		StringBuilder sb = new StringBuilder();
		for(int i=0; i<map.length; i++) {
			for(int j=0; j<map[i].length; j++) {
				sb.append(map[i][j]).append(" ");
			}
			sb.append("\n");
		}
		sb.setLength(sb.length()-1);
		System.out.println(sb);
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		for(int tc=1; tc<=T; tc++) {
			N = Integer.parseInt(br.readLine());	//달팽이의 크기
			map = new int[N][N];
//			DFS(1,0,0,0);
			
			int cnt=1;
			int r = 0;
			int c = 0;
			int d = 0;
			map[r][c]=cnt;
			while(cnt<N*N) {
				int nr = r+dr[d%4];
				int nc = c+dc[d%4];
				if(nr>=0 && nr<N && nc>=0 && nc<N && map[nr][nc]==0) {
					r=nr;
					c=nc;
					map[r][c]=++cnt;
				}
				else {
					++d;
				}
			}
			
			System.out.println("#"+tc);
			print();
		}
	}
}
