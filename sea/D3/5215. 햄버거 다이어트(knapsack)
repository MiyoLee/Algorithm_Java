package ssafy_algo_0208;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class SWEA_5215_D3 {
	// 배낭 알고리즘으로 풀어보겠다.

	static int N, L;
	static int[] v; // 맛 점수(가치)
	static int[] k; // 칼로리 (무게)
	static int[][] dp;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int T = Integer.parseInt(st.nextToken());

		for (int tc = 1; tc <= T; tc++) {
			st = new StringTokenizer(br.readLine(), " ");
			N = Integer.parseInt(st.nextToken());
			L = Integer.parseInt(st.nextToken());
			v = new int[N + 1]; // 0~N
			k = new int[N + 1]; // 0~N
			dp = new int[N + 1][L + 1];
			for (int i = 1; i <= N; i++) {
				st = new StringTokenizer(br.readLine(), " ");
				v[i] = Integer.parseInt(st.nextToken());
				k[i] = Integer.parseInt(st.nextToken());
			}	
			for (int i = 1; i <= N; i++) {		//i번 재료까지 넣을 수 있을때
				for(int j = 1; j<= L; j++) {	//j:최대무게
					if(k[i]>j) {
						dp[i][j]=dp[i-1][j];
					}
					else {
						dp[i][j]=Math.max(v[i]+dp[i-1][j-k[i]], dp[i-1][j]);
					}
				}
			}
			System.out.println("#"+tc+" "+dp[N][L]);
		}

	}
}
